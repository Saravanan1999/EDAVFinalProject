---
title: "Results"
format: html
---

# Results

## Executive Summary

This section presents the key findings from our sector-based financial analysis of Technology, Healthcare, and Banking stocks listed on NASDAQ over the past five years. Our analysis reveals distinct performance patterns, risk profiles, and sensitivities to economic indicators across the sectors. Notably, the Technology sector demonstrated robust growth and resilience, while the Banking sector exhibited higher volatility influenced by interest rate fluctuations.

## 1. Stock Performances on each sector

### 1.1 Closing Price

```{r fig.height=12, fig.width=15}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
library(lubridate)
library(zoo)  # for rollmean

# List the CSV files for each sector
banking_files <- list.files(path = "./Datasets/Banking/", pattern = "*.csv", full.names = TRUE)
tech_files <- list.files(path = "./Datasets/TECH/", pattern = "*.csv", full.names = TRUE)
health_files <- list.files(path = "./Datasets/Healthcare and Pharma/", pattern = "*.csv", full.names = TRUE)

# Define the function to read and process data for a single file and sector
read_sector_data <- function(file_path, sector) {
  data <- read_csv(file_path, show_col_types = FALSE)  
  
  colnames(data) <- tolower(gsub("\\s+", "_", colnames(data)))  
  
  required_columns <- c("date", "close", "open", "high", "low")
  missing_columns <- setdiff(required_columns, colnames(data))
  if (length(missing_columns) > 0) {
    stop(paste("Missing required columns in file:", file_path, 
               "-> Missing columns:", paste(missing_columns, collapse = ", ")))
  }
  
  data <- data %>%
    mutate(
      date = mdy(date),  
      close = as.numeric(gsub("\\$", "", close)),  
      open = as.numeric(gsub("\\$", "", open)),
      high = as.numeric(gsub("\\$", "", high)),
      low = as.numeric(gsub("\\$", "", low)),
      volume = as.numeric(gsub(",", "", volume))  
    ) %>%
    mutate(
      Sector = sector,
      Source = tools::file_path_sans_ext(basename(file_path))
    )
  
  return(data)
}

# Read and combine data for each sector
banking_data <- bind_rows(lapply(banking_files, read_sector_data, sector = "Banking"))
tech_data <- bind_rows(lapply(tech_files, read_sector_data, sector = "Technology"))
health_data <- bind_rows(lapply(health_files, read_sector_data, sector = "Healthcare"))

# Combine all sector data into one dataset
combined_data <- bind_rows(banking_data, tech_data, health_data)

# Rename 'Source' to 'Stock' before further processing
combined_data <- combined_data |>
  rename(Stock = Source)

# Create the 'all' dataset and compute additional metrics
all <- combined_data %>%
  mutate(
    Sector = as.factor(Sector),
    Stock = as.factor(Stock)
  ) %>%
  arrange(Stock, date) %>%
  group_by(Stock) %>%
  mutate(
    daily_return = (close - lag(close)) / lag(close) * 100,
    MA20 = rollmean(close, 20, fill = NA, align = "right"),
    MA50 = rollmean(close, 50, fill = NA, align = "right")
  ) %>%
  ungroup() |>
  na.omit()

# Create the faceted line chart with sectors arranged in rows
p <- ggplot(all, aes(x = date, y = close, color = Stock)) +
  geom_line(size = 1) +
  facet_grid(Sector ~ ., scales = "free_y") +  # Arrange facets in rows
  labs(
    title = "Stock Closing Prices Faceted by Sector",
    x = "Date",
    y = "Closing Price (USD)",
    color = "Stock"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )

# Display the plot
print(p)

```

## Opening Price

```{r fig.height=12, fig.width=15}
p <- ggplot(all, aes(x = date, y = open, color = Stock)) +
  geom_line(size = 1) +
  facet_grid(Sector ~ ., scales = "free_y") +  # Arrange facets in rows
  labs(
    title = "Stock Opening Prices Faceted by Sector",
    x = "Date",
    y = "Closing Price (USD)",
    color = "Stock"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )

# Display the plot
print(p)

```

## Trade Volume

```{r fig.height=12, fig.width=15}
p <- ggplot(all, aes(x = date, y = volume, color = Stock)) +
  geom_line(size = 1) +
  facet_grid(Sector ~ ., scales = "free_y") +  # Facet rows by Sector
  labs(
    title = "Stock Trading Volume Faceted by Sector",
    x = "Date",
    y = "Volume",
    color = "Stock"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )

# Display the plot
print(p)

```

## 2. Stock Analysis By Events

### 2.1 Technology
```{r}
library(dplyr)
library(tidyr)
library(lubridate)
library(plotly)
library(zoo)

# Assuming tech_data is already loaded

# Extract stock names from the Source column and pivot the data
wide_data <- tech_data %>%
  mutate(Stock = sub(" Historical data", "", Source)) %>%
  select(Date, close, Stock) %>%
  pivot_wider(names_from = Stock, values_from = close) %>%
  arrange(Date)

# Fill missing values using linear interpolation
wide_data <- wide_data %>%
  mutate(across(-Date, ~ na.approx(.x, na.rm = FALSE)))

# Define significant world events and their dates
events <- data.frame(
  date = as.Date(c("2019-04-15", "2020-03-11", "2020-12-14", "2021-01-06", 
                   "2022-02-24", "2023-10-07", "2024-11-05")),
  event = c("Notre-Dame Fire", "COVID-19 Declared", "Vaccine Rollout Begins", 
            "Capitol Riot", "Russia Invades Ukraine", "Israel-Hamas Conflict", 
            "2024 Presidential Election")
)

# Function to analyze stock performance around event dates
analyze_event_impact <- function(stock_data, event_date) {
  event_date <- as.Date(event_date)
  pre_event_date <- event_date - days(3)
  post_event_date <- event_date + days(3)
  
  relevant_prices <- stock_data %>%
    filter(Date >= pre_event_date & Date <= post_event_date)
  
  stock_columns <- setdiff(names(relevant_prices), "Date")
  
  returns <- relevant_prices %>%
    mutate(across(all_of(stock_columns), ~ (.x / lag(.x) - 1) * 100, .names = "{.col}_return"))
  
  return(returns)
}

# Analyze impact for each event and store results
impact_results <- lapply(events$date, function(event_date) {
  impact <- analyze_event_impact(wide_data, event_date)
  impact$Event <- events$event[events$date == event_date]
  return(impact)
})

# Combine results into a single data frame for reporting
results_df <- bind_rows(impact_results)

# Remove rows with all NA values in return columns
results_df <- results_df %>%
  filter(if_any(ends_with("_return"), ~ !is.na(.)))

# Prepare data for plotting
plot_data <- results_df %>%
  pivot_longer(cols = ends_with("_return"), 
               names_to = "Stock", 
               values_to = "Return",
               names_pattern = "(.+)_return") %>%
  filter(!is.na(Return))

# Create interactive plot using plotly
plot <- plot_ly()

# Add a trace for each stock
stocks <- unique(plot_data$Stock) # Get unique stock names from plot_data
for (stock in stocks) {
  stock_data <- plot_data %>% filter(Stock == stock)
  
  plot <- plot %>% add_trace(
    type = 'scatter',
    mode = 'lines+markers',
    x = stock_data$Date,
    y = stock_data$Return,
    name = stock,
    legendgroup = stock,
    visible = 'legendonly' # Start with traces hidden
  )
}

# Add vertical lines for events
for (i in seq_along(events$date)) {
  plot <- plot %>% add_segments(
    x = events$date[i], xend = events$date[i],
    y = min(plot_data$Return, na.rm = TRUE), yend = max(plot_data$Return, na.rm = TRUE),
    line = list(color = 'red', dash='dash'),
    showlegend = FALSE
  )
}

# Customize layout
plot %>% layout(
  title = "Stock Price Changes Around Major Events",
  xaxis = list(title = "Date"),
  yaxis = list(title = "Percentage Change (%)"),
  hovermode = "x unified"
)

```
### 2.2 Healthcare

### 2.3 Finance
