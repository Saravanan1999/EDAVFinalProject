# Data

## Description

For this project, we will use historical stock data for companies in three key sectors: Technology, Finance, and Healthcare. The dataset will span five years, allowing for a robust analysis of trends over time.

### Sectors and Companies

#### Technology:

- Apple Inc. (AAPL)
- Alphabet Inc. Class C (GOOG)
- Meta Platforms Inc. Class A (META)
- Microsoft Corp. (MSFT)
- NVIDIA Corporation (NVDA)

#### Finance:

- Bank of America (BAC)
- Goldman Sachs Group Inc. (GS)
- JPMorgan Chase & Co. (JPM)
- Morgan Stanley (MS)
- Wells Fargo & Co. (WFC)

#### Healthcare:

- AstraZeneca (AZN)
- Johnson & Johnson (JNJ)
- Eli Lilly and Co. (LLY)
- Merck & Co., Inc. (MRK)
- Pfizer Inc. (PFE)

### Data Source

Nasdaq collects data through its exchange from transactions conducted by various market participants, including institutional investors, brokers, market makers, and retail traders. The data encompasses details on market activity such as trades, order books, bid/ask prices, volumes, and timestamped events.

#### Transaction Data

Each trade, quote, and order is logged, providing insights into the dynamics of stock movements, liquidity, and market trends.

#### Participants

Market participants, including broker-dealers and investors, generate real-time and historical data through their buying and selling activities.

### Format and Frequency

The data will be accessed in formats like CSV, JSON, or XML, which are compatible with analysis tools such as Python or R. The frequency of updates varies:

- **Daily Data:** Updated at the end of each trading day.
- **Intraday (Minute-Level) Data:** Real-time updates available during market hours.

### Key Data Dimensions

- **Date:** Trading date.  
- **Open:** Opening stock price.  
- **High:** Highest price during the trading day.  
- **Low:** Lowest price during the trading day.  
- **Close/Last:** Closing price or last trade price.  
- **Volume:** Total shares traded.  

### Potential Issues

- **Data Gaps:** Missing data during market holidays or after-hours trading.
- **Adjustments:** Stock splits and dividends may require corrections for consistency.  
- **Data Volume:** Handling minute-level data over five years for multiple companies may require significant processing power and storage.  

### Data Import Plan

The data import strategy entails retrieving structured information from an API endpoint using HTTP requests that include appropriate headers to ensure successful communication. The JSON answer is processed and turned into a structured DataFrame, allowing for rapid data manipulation and analysis. Relevant data is then extracted and saved locally in a CSV file for further processing and analysis. This methodical methodology guarantees the smooth integration of raw data from an external source into a useful tabular format.

### Sources

Nasdaq's market data services will be the primary source, with potential supplementary data from financial APIs or publicly available CSV datasets.


## Missing value analysis
Reading data:
```{r}
BAC <- read.csv("C:\\Users\\PRAKASH\\Documents\\EDAVFinalProject\\Datasets\\Banking\\BAC Historical Data.csv")

head(BAC)
```

```{r}
GS <- read.csv("C:\\Users\\PRAKASH\\Documents\\EDAVFinalProject\\Datasets\\Banking\\GS Historical Data.csv")

head(GS)
```

```{r}
JPM <- read.csv("C:\\Users\\PRAKASH\\Documents\\EDAVFinalProject\\Datasets\\Banking\\JPM Historical Data.csv")

head(JPM)
```

```{r}
MS <- read.csv("C:\\Users\\PRAKASH\\Documents\\EDAVFinalProject\\Datasets\\Banking\\MS Historical Data.csv")

head(MS)
```

```{r}
WFC <- read.csv("C:\\Users\\PRAKASH\\Documents\\EDAVFinalProject\\Datasets\\Banking\\WFC Historical Data.csv")

head(WFC)
```

Checking Null Values:

```{r}
print(colSums(is.na(BAC)))
print(colSums(is.na(GS)))
print(colSums(is.na(JPM)))
print(colSums(is.na(MS)))
print(colSums(is.na(WFC)))
```
Visualizing Missing Data:
```{r}
library(ggplot2)
library(naniar)
library(dplyr)
library(tidyr)
```

```{r}
# List of datasets
data_list <- list(BAC = BAC, GS = GS, JPM = JPM, MS = MS, WFC = WFC)

# Generate missing value visualizations
for (name in names(data_list)) {
  cat("Visualizing missing data for", name, "\n")
  
  # Plot
  print(
    vis_miss(data_list[[name]]) +
      ggtitle(paste("Missing Data Visualization for", name))
  )
}

```


```{r}
# List of datasets
data_list <- list(BAC = BAC, GS = GS, JPM = JPM, MS = MS, WFC = WFC)

# Combine all datasets into one data frame with a 'Dataset' column indicating the dataset name
combined_data <- bind_rows(lapply(names(data_list), function(dataset_name) {
  data <- data_list[[dataset_name]]
  data$Dataset <- dataset_name
  return(data)
}))

# Convert all columns to character type
combined_data <- combined_data %>%
  mutate(across(everything(), as.character))

# Pivot longer and add a column for missing data
combined_data_long <- combined_data %>%
  pivot_longer(cols = -Dataset, names_to = "Column", values_to = "Value") %>%
  mutate(Missing = is.na(Value))

# Plot the missing data across datasets
ggplot(combined_data_long, aes(x = Column, y = Dataset, fill = Missing)) +
  geom_tile(color = "white") +
  scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "gray90")) +
  theme_minimal() +
  ggtitle("Missing Data Visualization Across Datasets") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability

```
For the finance sector dataset, we have plotted 2 kinds of graphs:
1. Missing value heatmap for each company: This plot shows that there is no missing for each company accross every column.
2. 